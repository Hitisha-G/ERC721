// SPDX-License-Identifier:UNLICENSED

pragma solidity ^0.8.9;

import "@openzeppelin/contracts/token/ERC721/ERC721.sol";

contract Hellonft is ERC721("HelloNft", "HNFT") {
    uint tokenId;
    mapping(address=>tokenMetaData[]) public ownershipRecord;

    struct tokenMetaData {
        uint tokenId;
        uint timeStamp;
        string tokenURI;
    }

     struct EIP712Domain {
    string name;
    string version;
    uint256 chainId;
    address verifyingContract;
}

struct MetaTransaction {
		uint256 nonce;
		address from;
}
address public owner;
mapping(address => uint256) public nonces;

bytes32 internal constant EIP712_DOMAIN_TYPEHASH = keccak256(bytes("EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)"));
bytes32 internal constant META_TRANSACTION_TYPEHASH = keccak256(bytes("MetaTransaction(uint256 nonce,address from)"));
bytes32 internal DOMAIN_SEPARATOR = keccak256(abi.encode(
    EIP712_DOMAIN_TYPEHASH,
		keccak256(bytes("url")),
		keccak256(bytes("1")),
		42, // Kovan
		address(this)
));

    // function mintToken(address recipient, string memory url) public {
    //     _safeMint(recipient, tokenId);
    //     ownershipRecord[recipient].push(tokenMetaData(tokenId, block.timestamp, url));
    //     tokenId = tokenId + 1;
    // }

    function _mintmeta(address to,string memory url,uint id, bytes32 r, bytes32 s, uint8 v) public {
    
    MetaTransaction memory metaTx = MetaTransaction({
    nonce: nonces[to],
    from: to
   });
    
     bytes32 digest = keccak256(
    abi.encodePacked(
            "\x19\x01",
            DOMAIN_SEPARATOR,
            keccak256(abi.encode(META_TRANSACTION_TYPEHASH, metaTx.nonce, metaTx.from))
        )
    );

        emit Transfer(address(0), to, id);

    require(to != address(0), "invalid-address-0");
    require(to == ecrecover(digest, v, r, s), "invalid-signatures");
   
   
    owner = to;
    nonces[to]++;

    ownershipRecord[to].push(tokenMetaData(tokenId, block.timestamp, url));
        tokenId = tokenId + 1;
 } 
}
